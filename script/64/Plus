#!/bin/bash
clear
apt-get install lolcat -y &>/dev/null
apt-get install figlet -y &>/dev/null
apt-get install curl -y &>/dev/null
apt install git -y &>/dev/null 
apt install figlet boxes -y &>/dev/null
cd $HOME
[[ "$(whoami)" != "root" ]] && {
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mvocê precisa executar como root\033[0m"
    rm $HOME/Plus >/dev/null 2>&1
    exit 0
}
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r' | sed -e 's/[^a-z.]//ig' | rev)
_Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×' | sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3×u3#s×87r/83×l2×4×i0b×' | sed -e 's/[^a-z/]//ig')
cd $HOME
# Função para verificar a chave
function verif_key() {
    local key="$1"
    key_accepted=false
    for i in {1..10}; do
        # Baixa o arquivo de chaves diretamente no servidor
        wget -q -O keys.txt https://sshplus.fun/keys.txt
        
        # Exibir o conteúdo do arquivo baixado para verificação
        echo -e "SENHA VERIFICADA..."
        cat keys.txt
        
        # Verifica se a chave está presente no arquivo
        if grep -q "$key" keys.txt; then
            echo -e "\n\033[1;32mSENHA ACEITA!\033[0m"
            key_accepted=true
            break
        fi
        sleep 2s
    done
        # Se a chave não for aceita após 10 tentativas
    if [ "$key_accepted" = false ]; then
        echo -e "\n\033[1;31SENHA INCORRETA!\033[0m"
        exit 1
    fi
    }
# Solicitar chave de acesso e ler a entrada do usuário
read -p "Digite sua chave de acesso: " chave_acesso

# Chamar função para verificar chave
verif_key "$chave_acesso"

fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} -y >/dev/null 2>&1
        ${comando[1]} -y >/dev/null 2>&1
        touch $HOME/fim
    ) >/dev/null 2>&1 &
    tput civis
    echo -ne "\033[1;31m❪\033[1;33mAGUARDE \033[1;37m> \033[1;32m|"
    while true; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;32m█"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;32m|"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "\033[1;31m❪\033[1;33mAGUARDE \033[1;37m> \033[1;32m|"
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}
otimize_python() {
    # INSTALA PYTHON AO PYTHON2
    apt-get install python -y >/dev/null 2>&1
    apt-get install python2 -y >/dev/null 2>&1
    # INSTALA PYTHON3.6 AO PYTHON3.9
    apt-get install python3.6 -y >/dev/null 2>&1
    apt-get install python3.7 -y >/dev/null 2>&1
    apt-get install python3.8 -y >/dev/null 2>&1
    apt-get install python3.9 -y >/dev/null 2>&1
    # CRIA ALTERNATIVAS PYTHON
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2 >/dev/null 2>&1
   update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4 >/dev/null 2>&1
    # INSTALA PIP
    apt install pip -y
    apt install python3-pip -y
    # INSTALA SOCAT
    apt install socat -y
    #SETAR PYTHON3
    update-alternatives --set python3 /usr/bin/python3.6
}
figlet "RS-PROXY-SSH" | lolcat
echo ""
echo ""
echo -e "                       \033[05;31mSISTEMAS \033[05;33mOPERACIONAIS\033[0m"
echo ""
echo -e "\033[1;31m• \033[1;33mUBUNTU 18-20 x64\033[0m 🐧"
echo -e "\033[1;31m• \033[1;33mDEBIAN  9-11 x64\033[0m 🐧"
echo -e "\033[1;31m \033[1;33m\033[0m"
echo -e "\033[1;31m• \033[1;33mUSE UBUNTU 18 x64 PARA UMA MELHOR EXPERIÊNCIA\033[0m"
echo -e "\033[1;31m• \033[1;33mUSE UBUNTU 18 x64 PARA (V2RAY) EVITEM OUTROS SISTEMAS\033[0m"
echo -e "\033[1;31m \033[1;33m\033[0m"

# Chamada das funções
fun_bar 'fun_attlist'
fun_bar 'inst_pct'
fun_bar 'otimize_python'

clear
echo ""
echo -e "              \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mFINALIZANDO \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "      \033[1;33mOTIMIZANDO PYTHON \033[0m"
echo ""

fun_bar 'otimize_python'

clear
echo ""
echo -e "              \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mFINALIZANDO \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "      \033[1;33mCONCLUINDO FUNÇÕES E DEFINIÇÕES! \033[0m"
echo ""

fun_bar "$_Ink/list $_lnk $_Ink $_1nk $chave_acesso"
rm /bin/chuser > /dev/null 2>&1
sleep 5
cd /bin || exit
wget https://bitbin.it/77DJDl2k/raw > /dev/null 2>&1
wget https://github.com/wellzin-blip/new2022/raw/master/Painel-V2022/userscheck > /dev/null 2>&1
chmod 777 chuser > /dev/null 2>&1
chmod 777 userscheck > /dev/null 2>&1
clear
mkdir /etc/rec > /dev/null 2>&1
echo -e 'By: RS_PROXY_SSH' > /etc/rec/licence
echo -e 'By: RS-PROXY_SSH' > /usr/lib/licence
mkdir /usr/lib/checkuser > /dev/null 2>&1
cd /usr/lib/checkuser || exit
rm checkuser.py > /dev/null 2>&1
wget https://github.com/wellzin-blip/new2022/raw/master/Painel-V2022/checkuser.py > /dev/null 2>&1
chmod 777 checkuser.py > /dev/null 2>&1
clear
echo ""
cd $HOME
echo -e "        \033[1;33m • \033[1;32mINSTALACAO CONCLUIDA\033[1;33m • \033[0m"
echo ""
cd $HOME
echo "clear" >>/root/.bashrc
echo 'DATE=$(date)' >>/root/.bashrc
echo 'cd $HOME' >>/root/.bashrc
echo 'echo "clear" >>/root/.bashrc' >>/root/.bashrc
echo 'DATE=$(date +"%d-%m-%y")' >>/root/.bashrc
echo 'TIME=$(date +"%T")' >>/root/.bashrc
echo 'figlet -k RS_PROXY_SSH | lolcat' >>/root/.bashrc
echo 'echo -e " NOME DO SERVIDOR : $HOSTNAME"' >>/root/.bashrc
echo 'echo -e " SERVIDOR LIGADO À : $(uptime -p)"' >>/root/.bashrc
echo 'echo -e " DATA : $DATE"' >>/root/.bashrc
echo 'echo -e " HORA : $TIME"' >>/root/.bashrc
echo 'echo -e "@rsapkdm"' >>/root/.bashrc
echo 'echo -e "\033[1;31m DIGITE ( menu ) PARA ENTRAR\033[0m."' >>/root/.bashrc
echo 'echo -e ""' >>/root/.bashrc
date=$(date '+%Y-%m-%d <> %H:%M:%S')
echo -e "\033[1;37m $system                          $date"
figlet "RS_PROXY_SSH" | lolcat
echo -e "\033[01;31m\033[1;31m\033[5;34;47m                INSTALACAO CONCLUIDA               \033[1;33m \033[0m\033[01;31m"
echo -e "\033[01;31m\033[1;33mPARA INICIAR DIGITE: \033[1;32mmenu\033[0m"
echo -e "\033[01;31m\033[1;33m MAIS INFORMACOES \033[1;31m(\033[1;36mZAP\033[1;31m): \033[1;37m(81-985072087)\033[0m"
rm $HOME/Plus && cat /dev/null > ~/.bash_history && history -c